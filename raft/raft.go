// Copyright 2015 The etcd Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package raft

import (
	"errors"

	pb "github.com/pingcap-incubator/tinykv/proto/pkg/eraftpb"
)

// None is a placeholder node ID used when there is no leader.
const None uint64 = 0

// StateType represents the role of a node in a cluster.
type StateType uint64

const (
	StateFollower StateType = iota
	StateCandidate
	StateLeader
)

var stmap = [...]string{
	"StateFollower",
	"StateCandidate",
	"StateLeader",
}

func (st StateType) String() string {
	return stmap[uint64(st)]
}

// ErrProposalDropped is returned when the proposal is ignored by some cases,
// so that the proposer can be notified and fail fast.
var ErrProposalDropped = errors.New("raft proposal dropped")

// Config contains the parameters to start a raft.
type Config struct {
	// ID is the identity of the local raft. ID cannot be 0.
	ID uint64

	// peers contains the IDs of all nodes (including self) in the raft cluster. It
	// should only be set when starting a new raft cluster. Restarting raft from
	// previous configuration will panic if peers is set. peer is private and only
	// used for testing right now.
	peers []uint64

	// ElectionTick is the number of Node.Tick invocations that must pass between
	// elections. That is, if a follower does not receive any message from the
	// leader of current term before ElectionTick has elapsed, it will become
	// candidate and start an election. ElectionTick must be greater than
	// HeartbeatTick. We suggest ElectionTick = 10 * HeartbeatTick to avoid
	// unnecessary leader switching.
	ElectionTick int
	// HeartbeatTick is the number of Node.Tick invocations that must pass between
	// heartbeats. That is, a leader sends heartbeat messages to maintain its
	// leadership every HeartbeatTick ticks.
	HeartbeatTick int

	// Storage is the storage for raft. raft generates entries and states to be
	// stored in storage. raft reads the persisted entries and states out of
	// Storage when it needs. raft reads out the previous state and configuration
	// out of storage when restarting.
	Storage Storage
	// Applied is the last applied index. It should only be set when restarting
	// raft. raft will not return entries to the application smaller or equal to
	// Applied. If Applied is unset when restarting, raft might return previous
	// applied entries. This is a very application dependent configuration.
	Applied uint64
}

func (c *Config) validate() error {
	if c.ID == None {
		return errors.New("cannot use none as id")
	}

	if c.HeartbeatTick <= 0 {
		return errors.New("heartbeat tick must be greater than 0")
	}

	if c.ElectionTick <= c.HeartbeatTick {
		return errors.New("election tick must be greater than heartbeat tick")
	}

	if c.Storage == nil {
		return errors.New("storage cannot be nil")
	}

	return nil
}

// Progress represents a followerâ€™s progress in the view of the leader. Leader maintains
// progresses of all followers, and sends entries to the follower based on its progress.
type Progress struct {
	Match, Next uint64
}

type Raft struct {
	id uint64

	Term uint64
	Vote uint64

	// the log
	RaftLog *RaftLog

	// log replication progress of each peers
	Prs map[uint64]*Progress

	// this peer's role
	State StateType

	// votes records
	votes map[uint64]bool

	// msgs need to send
	msgs []pb.Message

	// the leader id
	Lead uint64

	// heartbeat interval, should send
	heartbeatTimeout int
	// baseline of election interval
	electionTimeout int
	// number of ticks since it reached last heartbeatTimeout.
	// only leader keeps heartbeatElapsed.
	heartbeatElapsed int
	// Ticks since it reached last electionTimeout when it is leader or candidate.
	// Number of ticks since it reached last electionTimeout or received a
	// valid message from current leader when it is a follower.
	electionElapsed int
	// randomElectionTimeout is generated by electionTimeout
	randomElectionTimeout int

	// leadTransferee is id of the leader transfer target when its value is not zero.
	// Follow the procedure defined in section 3.10 of Raft phd thesis.
	// (https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf)
	// (Used in 3A leader transfer)
	leadTransferee uint64

	// Only one conf change may be pending (in the log, but not yet
	// applied) at a time. This is enforced via PendingConfIndex, which
	// is set to a value >= the log index of the latest pending
	// configuration change (if any). Config changes are only allowed to
	// be proposed if the leader's applied index is greater than this
	// value.
	// (Used in 3A conf change)
	PendingConfIndex uint64
}

// newRaft return a raft peer with the given config
func newRaft(c *Config) *Raft {
	if err := c.validate(); err != nil {
		panic(err.Error())
	}
	// Your Code Here (2A).
	prs := make(map[uint64]*Progress, len(c.peers))
	for _, id := range c.peers {
		prs[id] = &Progress{
			Match: 0,
			Next:  0,
		}
	}
	hs, _, _ := c.Storage.InitialState()
	raft := &Raft{
		id:                    c.ID,
		Term:                  hs.Term,
		Vote:                  hs.Vote,
		RaftLog:               newLog(c.Storage),
		Prs:                   prs,
		State:                 StateFollower,
		votes:                 make(map[uint64]bool),
		heartbeatTimeout:      c.HeartbeatTick,
		electionTimeout:       c.ElectionTick,
		heartbeatElapsed:      0,
		electionElapsed:       0,
		randomElectionTimeout: RandomTickFromBaseline(c.ElectionTick),
	}
	return raft
}

// move this func from test
func (r *Raft) readMessages() []pb.Message {
	msgs := r.msgs
	r.msgs = make([]pb.Message, 0)
	return msgs
}

// sendAppend sends an append RPC with new entries (if any) and the
// current commit index to the given peer. Returns true if a message was sent.
func (r *Raft) sendAppend(to uint64) bool {
	// Your Code Here (2A).
	progress, ok := r.Prs[to]
	if !ok {
		return false
	}
	lastIndex := r.RaftLog.LastIndex()
	prevLogIndex := min(lastIndex, progress.Next-1)
	prevLogTerm, _ := r.RaftLog.Term(prevLogIndex)
	msg := pb.Message{
		MsgType: pb.MessageType_MsgAppend,
		To:      to,
		From:    r.id,
		Term:    r.Term,
		Commit:  r.RaftLog.committed,
		Index:   prevLogIndex,
		LogTerm: prevLogTerm,
		Entries: r.RaftLog.SliceEntries(prevLogIndex + 1),
	}
	r.msgs = append(r.msgs, msg)
	return true
}

// sendHeartbeat sends a heartbeat RPC to the given peer.
func (r *Raft) sendHeartbeat(to uint64) {
	// Your Code Here (2A).
	msg := pb.Message{
		MsgType: pb.MessageType_MsgHeartbeat,
		To:      to,
		From:    r.id,
		Term:    r.Term,
		Commit:  r.RaftLog.committed,
	}
	r.msgs = append(r.msgs, msg)
}

// tick advances the internal logical clock by a single tick.
func (r *Raft) tick() {
	// Your Code Here (2A).
	r.electionElapsed++
	if r.electionElapsed == r.randomElectionTimeout {
		r.Step(pb.Message{
			MsgType: pb.MessageType_MsgHup,
		})
	}
	if r.State == StateLeader {
		r.heartbeatElapsed++
		if r.heartbeatElapsed == r.heartbeatTimeout {
			r.Step(pb.Message{
				MsgType: pb.MessageType_MsgBeat,
			})
		}
	}
}

// becomeFollower transform this peer's state to Follower
func (r *Raft) becomeFollower(term uint64, lead uint64) {
	// Your Code Here (2A).
	r.State = StateFollower
	r.Term = term
	r.Lead = lead
	r.Vote = lead
	r.electionElapsed = 0
}

// becomeCandidate transform this peer's state to candidate
func (r *Raft) becomeCandidate() {
	// Your Code Here (2A).
	r.Term++
	r.Vote = r.id
	r.State = StateCandidate
	r.votes = make(map[uint64]bool)
	r.votes[r.id] = true
	r.electionElapsed = 0
	r.randomElectionTimeout = RandomTickFromBaseline(r.electionTimeout)

	lastLogTerm, _ := r.RaftLog.Term(r.RaftLog.LastIndex())
	for id := range r.Prs {
		if id == r.id {
			continue
		}
		msg := pb.Message{
			MsgType: pb.MessageType_MsgRequestVote,
			To:      id,
			From:    r.id,
			Term:    r.Term,
			LogTerm: lastLogTerm,
			Index:   r.RaftLog.LastIndex(),
		}
		r.msgs = append(r.msgs, msg)
	}
	r.isCampaignWinner()
}

// becomeLeader transform this peer's state to leader
func (r *Raft) becomeLeader() {
	// Your Code Here (2A).
	// NOTE: Leader should propose a noop entry on its term
	r.State = StateLeader
	r.heartbeatElapsed = 0
	r.Lead = r.id

	for id := range r.Prs {
		r.Prs[id].Next = r.RaftLog.LastIndex() + 1
		r.Prs[id].Match = 0
	}
	r.sendNoopEntry()
}

func (r *Raft) sendNoopEntry() {
	r.Step(pb.Message{
		MsgType: pb.MessageType_MsgPropose,
		To:      r.id,
		From:    r.id,
		Entries: []*pb.Entry{
			{
				EntryType: pb.EntryType_EntryNormal,
			},
		},
	})
}

// Step the entrance of handle message, see `MessageType`
// on `eraftpb.proto` for what msgs should be handled
func (r *Raft) Step(m pb.Message) error {
	// Your Code Here (2A).
	switch r.State {
	case StateFollower:
		switch m.MsgType {
		case pb.MessageType_MsgHup:
			r.becomeCandidate()
		case pb.MessageType_MsgBeat:
		case pb.MessageType_MsgPropose:
		case pb.MessageType_MsgAppend:
			r.handleAppendEntries(m)
		case pb.MessageType_MsgAppendResponse:
		case pb.MessageType_MsgRequestVote:
			r.handleVoteRequest(m)
		case pb.MessageType_MsgRequestVoteResponse:
		case pb.MessageType_MsgSnapshot:
			// todo
		case pb.MessageType_MsgHeartbeat:
			r.handleHeartbeat(m)
		case pb.MessageType_MsgHeartbeatResponse:
		case pb.MessageType_MsgTransferLeader:
		case pb.MessageType_MsgTimeoutNow:
		}

	case StateCandidate:
		switch m.MsgType {
		case pb.MessageType_MsgHup:
			r.becomeCandidate()
		case pb.MessageType_MsgBeat:
		case pb.MessageType_MsgPropose:
		case pb.MessageType_MsgAppend:
			r.handleAppendEntries(m)
		case pb.MessageType_MsgAppendResponse:
		case pb.MessageType_MsgRequestVote:
			r.handleVoteRequest(m)
		case pb.MessageType_MsgRequestVoteResponse:
			r.handleVoteResponse(m)
		case pb.MessageType_MsgSnapshot:
			// todo
		case pb.MessageType_MsgHeartbeat:
			r.handleHeartbeat(m)
		case pb.MessageType_MsgHeartbeatResponse:
		case pb.MessageType_MsgTransferLeader:
		case pb.MessageType_MsgTimeoutNow:
		}
	case StateLeader:
		switch m.MsgType {
		case pb.MessageType_MsgHup:
			// attempt to add term
			// just a try. And original test `TestCampaignWhileLeader2AA` will fail.
			r.Term++
		case pb.MessageType_MsgBeat:
			for id := range r.Prs {
				if id == r.id {
					continue
				}
				r.sendHeartbeat(id)
			}
		case pb.MessageType_MsgPropose:
			r.appendEntryLeader(m.Entries)
			for id := range r.Prs {
				if id == r.id {
					continue
				}
				r.sendAppend(id)
			}
		case pb.MessageType_MsgAppend:
			r.handleAppendEntries(m)
		case pb.MessageType_MsgAppendResponse:
			r.handleAppendResponse(m)
		case pb.MessageType_MsgRequestVote:
			r.handleVoteRequest(m)
		case pb.MessageType_MsgRequestVoteResponse:
		case pb.MessageType_MsgSnapshot:
			// todo
		case pb.MessageType_MsgHeartbeat:
			r.handleHeartbeat(m)
		case pb.MessageType_MsgHeartbeatResponse:
			r.handleHeartbeatResponse(m)
		case pb.MessageType_MsgTransferLeader:
			// todo
		case pb.MessageType_MsgTimeoutNow:
			// todo
		}
	}
	return nil
}

// handleAppendEntries handle AppendEntries RPC request
func (r *Raft) handleAppendEntries(m pb.Message) {
	// Your Code Here (2A).
	reject := true
	if r.Term <= m.Term {
		r.becomeFollower(m.Term, m.From)
		reject = false
	}
	if !reject {
		reject = !r.RaftLog.AppendEntries(m.Entries, m.Index, m.LogTerm)
	}
	if !reject {
		r.RaftLog.UpdateCommit(min(m.Commit, m.Index+uint64(len(m.Entries))))
	}
	msg := pb.Message{
		MsgType: pb.MessageType_MsgAppendResponse,
		To:      m.From,
		From:    r.id,
		Reject:  reject,
		Index:   r.RaftLog.LastIndex(),
		Term:    r.Term,
	}
	r.msgs = append(r.msgs, msg)
}

func (r *Raft) appendEntryLeader(entries []*pb.Entry) {
	for idx, entry := range entries {
		entry.Term = r.Term
		entry.Index = r.RaftLog.LastIndex() + 1 + uint64(idx)
	}
	if ok := r.RaftLog.AppendEntries(entries, r.RaftLog.LastIndex(), r.RaftLog.LastTerm()); !ok {
		return
	}
	r.updateProcess(r.id, r.RaftLog.LastIndex())
	r.advanceCommit()
}

func (r *Raft) updateProcess(peerID, index uint64) {
	pr := r.Prs[peerID]
	pr.Next = index + 1
	pr.Match = index
}

// handleAppendResponse handle AppendEntries RPC Response
func (r *Raft) handleAppendResponse(m pb.Message) {
	// Your Code Here (2A).
	if r.Term < m.Term {
		r.becomeFollower(m.Term, m.From)
		return
	}
	if !m.Reject {
		r.updateProcess(m.From, m.Index)
		r.advanceCommit()
	} else {
		r.Prs[m.From].Next--
		r.sendAppend(m.From)
	}
}

func (r *Raft) advanceCommit() {
	updateFlag := false
	for {
		count := 0
		minCommit := ^uint64(0)
		for _, pr := range r.Prs {
			if pr.Match > r.RaftLog.committed {
				minCommit = min(minCommit, pr.Match)
				count++
			}
		}
		if count > len(r.Prs)/2 {
			term, err := r.RaftLog.Term(minCommit)
			if err == nil && term == r.Term {
				r.RaftLog.UpdateCommit(minCommit)
				updateFlag = true
				continue
			}
		}
		break
	}
	if updateFlag {
		// We can't do that in TinyKV because it would loop forever.
		// In practical implement, i think it will send it by heartbeat.
		// r.sendNoopEntry()
		r.Step(pb.Message{
			From:    r.id,
			To:      r.id,
			MsgType: pb.MessageType_MsgPropose,
		})
	}
}

// handleHeartbeat handle Heartbeat RPC request
func (r *Raft) handleHeartbeat(m pb.Message) {
	// Your Code Here (2A).
	reject := true
	if r.Term <= m.Term {
		r.becomeFollower(m.Term, m.From)
		reject = false
	}
	if !reject {
		r.RaftLog.UpdateCommit(min(m.Commit, m.Index+uint64(len(m.Entries))))
	}
	msg := pb.Message{
		MsgType: pb.MessageType_MsgHeartbeatResponse,
		To:      m.From,
		From:    r.id,
		Term:    r.Term,
		Index:   r.RaftLog.LastIndex(),
		Reject:  reject,
	}
	r.msgs = append(r.msgs, msg)
}

// handleHeartbeatResponse handle Heartbeat RPC response
func (r *Raft) handleHeartbeatResponse(m pb.Message) {
	// Your Code Here (2A).
	if r.Term < m.Term {
		r.becomeFollower(m.Term, m.From)
		return
	}
	r.updateProcess(m.From, m.Index)
	r.advanceCommit()
	r.sendAppend(m.From)
}

// handleVoteRequest handle Vote RPC request
func (r *Raft) handleVoteRequest(m pb.Message) {
	reject := true
	if m.Term > r.Term {
		r.becomeFollower(m.Term, None)
	}
	if m.Term == r.Term && (r.Vote == m.From || r.Vote == None) {
		lastLogIndex := r.RaftLog.LastIndex()
		lastLogTerm, _ := r.RaftLog.Term(lastLogIndex)
		if lastLogTerm < m.LogTerm || (lastLogTerm == m.LogTerm && lastLogIndex <= m.Index) {
			reject = false
		}
	}
	if !reject {
		r.Vote = m.From
	}
	msg := pb.Message{
		MsgType: pb.MessageType_MsgRequestVoteResponse,
		Reject:  reject,
		From:    r.id,
		To:      m.From,
		Term:    r.Term,
	}
	r.msgs = append(r.msgs, msg)
}

// handleVoteResponse handle Vote RPC response
func (r *Raft) handleVoteResponse(m pb.Message) {
	if m.Term > r.Term {
		r.becomeFollower(m.Term, None)
	}
	if !m.Reject {
		r.votes[m.From] = true
	} else {
		r.votes[m.From] = false
	}
	r.isCampaignWinner()
}

func (r *Raft) isCampaignWinner() {
	countVote := 0
	countReject := 0
	for _, isVote := range r.votes {
		if isVote {
			countVote++
		} else {
			countReject++
		}
	}
	if countVote > len(r.Prs)/2 {
		r.becomeLeader()
	}
	if countReject > len(r.Prs)/2 {
		r.becomeFollower(r.Term, 0)
	}
}

// handleSnapshot handle Snapshot RPC request
func (r *Raft) handleSnapshot(m pb.Message) {
	// Your Code Here (2C).
}

// addNode add a new node to raft group
func (r *Raft) addNode(id uint64) {
	// Your Code Here (3A).
}

// removeNode remove a node from raft group
func (r *Raft) removeNode(id uint64) {
	// Your Code Here (3A).
}
